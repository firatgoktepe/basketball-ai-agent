#!/usr/bin/env node

/**
 * Test Model Loading Script
 * 
 * This script verifies that the MoveNet model files are accessible and can be loaded.
 * Run this to diagnose model loading issues.
 * 
 * Usage: node scripts/test-model-loading.js
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Basketball Agent - Model Loading Test\n');
console.log('========================================\n');

// Check if model files exist
const modelDir = path.join(__dirname, '..', 'public', 'models', 'movenet');
const modelJsonPath = path.join(modelDir, 'model.json');
const shard1Path = path.join(modelDir, 'group1-shard1of2.bin');
const shard2Path = path.join(modelDir, 'group1-shard2of2.bin');

console.log('üìÅ Checking model files...\n');

const checkFile = (filePath, name) => {
  if (fs.existsSync(filePath)) {
    const stats = fs.statSync(filePath);
    const sizeMB = (stats.size / 1024 / 1024).toFixed(2);
    console.log(`‚úÖ ${name}: ${sizeMB} MB`);
    return true;
  } else {
    console.log(`‚ùå ${name}: NOT FOUND`);
    return false;
  }
};

const modelJsonExists = checkFile(modelJsonPath, 'model.json');
const shard1Exists = checkFile(shard1Path, 'group1-shard1of2.bin');
const shard2Exists = checkFile(shard2Path, 'group1-shard2of2.bin');

console.log('');

if (!modelJsonExists || !shard1Exists || !shard2Exists) {
  console.error('‚ùå Model files are missing!');
  console.log('\nüì• To download the model files:');
  console.log('1. Visit: https://tfhub.dev/google/tfjs-model/movenet/singlepose/lightning/4');
  console.log('2. Download model.json and weight shards');
  console.log('3. Place them in: public/models/movenet/');
  console.log('\nOr run: bash scripts/download-movenet.sh');
  process.exit(1);
}

// Verify model.json format
console.log('üìÑ Verifying model.json format...\n');

try {
  const modelData = JSON.parse(fs.readFileSync(modelJsonPath, 'utf8'));
  
  console.log(`Format: ${modelData.format || 'unknown'}`);
  console.log(`Generated by: ${modelData.generatedBy || 'unknown'}`);
  console.log(`Converted by: ${modelData.convertedBy || 'unknown'}`);
  
  if (modelData.format !== 'graph-model') {
    console.warn(`‚ö†Ô∏è Warning: Expected format "graph-model", got "${modelData.format}"`);
  } else {
    console.log('‚úÖ Model format is correct');
  }
  
  // Check weight manifest
  if (modelData.weightsManifest && modelData.weightsManifest[0]) {
    const weightPaths = modelData.weightsManifest[0].paths || [];
    console.log(`\nWeight files referenced: ${weightPaths.join(', ')}`);
    
    // Verify weight files match what's on disk
    const expectedFiles = ['group1-shard1of2.bin', 'group1-shard2of2.bin'];
    const allMatch = weightPaths.every(p => expectedFiles.includes(p));
    
    if (allMatch) {
      console.log('‚úÖ Weight file references match actual files');
    } else {
      console.warn('‚ö†Ô∏è Weight file references do NOT match actual files!');
      console.log('Expected:', expectedFiles);
      console.log('Referenced:', weightPaths);
    }
  }
  
  // Check input/output shapes
  if (modelData.signature) {
    const inputShape = modelData.signature.inputs?.['input:0']?.tensorShape;
    const outputShape = modelData.signature.outputs?.['Identity:0']?.tensorShape;
    
    console.log('\nüìä Model I/O:');
    console.log(`Input shape: ${JSON.stringify(inputShape?.dim || 'unknown')}`);
    console.log(`Output shape: ${JSON.stringify(outputShape?.dim || 'unknown')}`);
    
    // Verify expected shapes
    const expectedInput = '[1, 192, 192, 3]';
    const expectedOutput = '[1, 1, 17, 3]';
    
    if (JSON.stringify(inputShape?.dim) !== JSON.stringify([
      { size: "1" }, { size: "192" }, { size: "192" }, { size: "3" }
    ])) {
      console.warn(`‚ö†Ô∏è Warning: Input shape doesn't match expected ${expectedInput}`);
    }
  }
  
  console.log('\n‚úÖ Model JSON is valid and correctly formatted');
  
} catch (error) {
  console.error('‚ùå Failed to parse model.json:', error.message);
  process.exit(1);
}

console.log('\n========================================');
console.log('‚úÖ All model files verified!\n');
console.log('The model should load correctly in the application.');
console.log('If it still fails, check the browser console for:');
console.log('  - CORS errors');
console.log('  - TensorFlow.js errors');
console.log('  - Network errors\n');
console.log('Run the application and look for:');
console.log('  "‚úÖ MoveNet loaded successfully from local storage!"');
console.log('');

